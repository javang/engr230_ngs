
import sys

class GeneRecord:

    def read(self, fh, first_line):
        """
            Read a gene record from the XLS table generated by downloading gene
            information data from the IMG/M database
            @param  gene
        """
        first_fields = first_line.rstrip("\n\t").split("\t")
        self.gene_id = first_fields[0]
        self.locus_tag = first_fields[1]
        while True:
            line = fh.readline()
            fields = line.rstrip("\n\t").split("\t")
            if not fields[0] == self.gene_id:
                return line
            if self.is_cog(fields):
                self.cog = fields[2]
                self.cog_description = fields[3]
                self.cog_Evalue = fields[4]
            if self.is_scaffold(fields):
                self.scaffold = fields[3]
            if self.is_coordinates(fields):
                self.coordinates = self.parse_coordinates(fields[3])                

    def is_cog(self, fields):
        """
            Returns true if a line contains COG information
            @param fields fields in the line
        """
        if not fields[2][0:3] == "COG" or fields[2] == "COG_category":
            return False
        return True

    def is_scaffold(self, fields ):
        """
            Returns True if a line contains a scaffold id
            @param fields fields in the line
        """
        if fields[2].lower() == "scaffold":
            return True
        return False
    
    def is_coordinates(self, fields):
        if fields[2].lower() == "coordinates":
            return True
        return False    


    def show(self, ):        
        print self.gene_id, self.locus_tag, self.cog, self.cog_Evalue


fh = open(sys.argv[1])
fields_for_gene = []
for line in fh:
    line = line.rstrip("\n\t")
    if line:
        fields = line.split("\t")                    
        if len(fields_for_gene) == 0:
            fields_for_gene.append(fields)
        elif fields[0] == fields_for_gene

